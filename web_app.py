import streamlit as st
import pandas as pd
import io

# from docx import Document
import os
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
import tempfile
from typing import List, Dict
from utils import convert_docx_to_text
import pandas as pd
import random

from rag import CertRAG

cert_rag = CertRAG(rag_type="default")


def process_single_requirement(text):
    compliance_result = cert_rag.cert_documents(text)
    return {
        "–û–±—ä–µ–∫—Ç": compliance_result["object"],
        # "–†–µ–≥–ª–∞–º–µ–Ω—Ç": compliance_result["regulation_paragraph"],
        "–¢–∏–ø": compliance_result["type"],
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": compliance_result["comment"],
    }


st.set_page_config(layout="wide")
st.title("üìã –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π üìã")

tab1, tab2, tab3 = st.tabs(["–ù–æ–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", "–°–ø—Ä–∞–≤–∫–∞"])

with tab1:
    requirement_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîé"):
        if requirement_text:
            result = process_single_requirement(requirement_text)
            # Determine the verdict icon
            verdict_icon = (
                "‚úÖ"
                if result.get("–¢–∏–ø") in ["0", "1"]
                else "‚ùî" if result.get("–¢–∏–ø") == "2" else "‚ùå"
            )
            st.header(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {verdict_icon}")

            if "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è" in result:
                st.markdown(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {result['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']}")

            # Display other items
            for key, value in result.items():
                if key != "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è":
                    if key == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
                        # Translate the comment to Russian
                        translation_prompt = f"Translate the following text from English to Russian:\n\n{value}\n\nTranslation:"
                        russian_translation = cert_rag.llm.generate_response(
                            translation_prompt, {}
                        )
                        st.markdown(f"**{key}:** {russian_translation}")
                    else:
                        st.markdown(f"**{key}:** {value}")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.")

with tab2:
    # st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–º–µ—é—â–∏—Ö—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (.docx –∏–ª–∏ .txt)",
        accept_multiple_files=True,
        type=["docx", "txt"],
    )
    folder_path = st.text_input("–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏:")

    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ üîé"):
        files_text = []
        if uploaded_files:
            for file in uploaded_files:
                files_text.append((file.name, convert_docx_to_text(file)))
        elif folder_path:
            for filename in os.listdir(folder_path):
                if filename.endswith(".docx") or filename.endswith(".txt"):
                    with open(os.path.join(folder_path, filename), "rb") as file:
                        files_text.append((filename, convert_docx_to_text(file)))

        if files_text:
            results = [cert_rag.cert_documents(text) for _, text in files_text]
            for result in results:
                if result.get("comment"):
                    translation_prompt = f"Translate the following text from English to Russian:\n\n{result['comment']}\n\nTranslation:"
                    result["comment"] = cert_rag.llm.generate_response(
                        translation_prompt, {}
                    )
            st.header("üìä –û—Ç—á–µ—Ç:")
            correct_count = sum(1 for r in results if r["type"] in ["0", "1", "2"])
            violation_count = len(results) - correct_count
            st.markdown(f"**‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:** {correct_count}")
            st.markdown(f"**‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–π:** {violation_count}")

            df = pd.DataFrame(results)
            st.dataframe(df, width=1000)

            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:
                df.to_excel(writer, sheet_name="Report", index=False)
            excel_buffer.seek(0)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å (Excel)",
                data=excel_buffer,
                file_name="report.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
        else:
            st.warning(
                "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ."
            )

with tab3:
    st.markdown("## üìö –°–ø—Ä–∞–≤–∫–∞ ")
    st.markdown(
        """
        –¢–∏–ø 0: –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–∞–º. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
        """
    )
    st.markdown(
        """
        –¢–∏–ø 1: –í –∫–µ–π—Å–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã —Å–æ–±–ª—é–¥–µ–Ω—ã.
        """
    )
    st.markdown(
        """
        –¢–∏–ø 2: –í –∫–µ–π—Å–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã, –Ω–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. –í –∫–µ–π—Å–µ –Ω–µ –æ–ø–∏—Å–∞–Ω—ã —ç—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∫–µ–π—Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏–∑ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.
        """
    )
    st.markdown(
        """
        –¢–∏–ø 3: –í –∫–µ–π—Å–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã, –Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ü–†–û–¢–ò–í–û–†–ï–ß–ê–¢ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
    )
